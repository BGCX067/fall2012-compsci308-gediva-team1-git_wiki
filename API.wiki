#summary The API for interaction between the View and Model.

= API Google Doc =

https://docs.google.com/document/d/10o7NqKBWECmx7XVDoPPb3_IIbAdbcqK_9OiAS2qLUZc/edit


= Specifications =

== Desired Features ==

 * Simple chart view of the stock
  * Stock name
  * Latest Stock Price
 * Trendline Drawing Tools
  * 50-day moving average
  * Simple linear trend lines
  * Channel (just two lines drawn from two price minimums and maximums)
 * Loading and comparing multiple stocks
  * Side by side comparison
 * Interactive Chart
  * Adjustable dates
  * Activating and deactivating view of analysis tools

== Design Scheme ==

The model view controller paradigm will be used throughout this design. The model serves as the wrapper that holds all the data known to the system. It is responsible for building, processing,  and returning requested data. The controller is the middleman between the model and view. It serves as the glue logic that allows the views to interact with the model. The views are responsible for displaying and receiving information from the user.

Data is passed back and forth from the controller and the model via Response and Request objects. To retrieve data from the model, a Request is built by embedding whatever information is desired onto the request object. This request is then passed onto the model, and in “response” the model builds a Response object. This Response object once again contains all the relevant information that came about from the Request. This scheme was chosen because it helps encapsulate data into objects. Doing so allows us to not have random strings, arraylists, maps, and such, floating around the controller. 

== Analogy ==

We are using MVC, which is like a restaurant. A customer (view) just makes requests and is served by the waiter (controller) who forwards those requests to the chef (model).

== Class Hierarchies ==

=== Controller ===

 * Controller

=== Model ===

 * IModel (Interface)
  * Stock

=== View ===

 * Canvas
 * View
  * Header
  * Graph
  * Menu
  * Button

=== Data ===

 * DataSet - returned by requests to model
 * DataTable - internals for models and dataset

=== Parsers ===

 * GenericParser (Abstract)
  * WebParser
  * FileParser

== Methods ==
{{{
public class Controller {

  public boolean chooseFile()

}

public interface class IModel {

  public boolean load(BufferedReader br)
  public String uniqueName()
  public Response process(RequestType r)

}

public class Stock implements IModel {

  public static enum RequestType
  public Stock(BufferedReader br)
  @Override
  public boolean load(BufferedReader br)
  @Override
  public String uniqueName()
  public String companyName()
  @Override
  public DataSet process(RequestType r)

}

public class Canvas {

  public Canvas(Dimension2D size)
  public void paint()
  public void addView()
  public void update()

}

public class View {

  public View(Point2D position, Dimension size)
  public View(Point2D position, Dimension size, Color bgcolor)
  public paint(Graphics2D pen)
  public void addChild(View child)
  public void removeChild(View child)

}

public class Header extends View {
  
  public Header (Point2D position, Dimension size, String title,
    String subtitle, String price, Color bgcolor, Color wordColor)
  public Header (Point2D position, Dimension size, String title,
    String subtitle, String price)
  public void paint(Graphics2D pen)
  public void setTitle(String title)
  public void setSubtitle(String subtitle)
  public void setPrice(String price)

}

public class Graph extends View {

  public void setPoints(Map<Number, Number> points)
  public void setAxisTitles(String yAxisTitle, String xAxisTitle)
  public void setColor()

}

public class Menu extends View {

  public Menu(Point2D position, Dimension size, String title,
    Color bgColor, Color textColor)
  public Menu(Point2D position, Dimension size, String title)
  public void paint(Graphics2D pen)

}

public class Button extends View implements MouseListener {

  public void setTitle(String title)
  public void setMethod(a method which will be in the controller)
  public void addAttribute(String key, Object value)
  public void removeAttribute(String key)
  public void getAttribute(String key)
  public void mouseClicked()

}

public class DataSet {

  public Iterator getData()
  public DataSet sort(String attribute)
  public DataSet range(String attribute, Range range)
  public Number getMax(String attribute)
  public Number getMin(String attribute)
  public Number getAverage(String attribute)

}

public class DataTable {}

public abstract class GenericParser {
        
  public GenericParser()
  public BufferedReader generateReader(String name)
  public BufferedReader isSupported(String name)

}

public class FileParser {

  @Override
  public BufferedReader generateReader(String name)
  @Override 
  public BufferedReader isSupported(String name)

}

public class WebParser {

  @Override
  public BufferedReader generateReader(String name)
  @Override 
  public BufferedReader isSupported(String name)

}
}}}